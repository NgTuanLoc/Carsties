1/ git tips
    [Give a clean commit list]: git log --all --decorate --oneline --graph
    [Check out commit]: git checkout #commit-id
    [make an alias for git command]: git config --global alias.adog "log --all --decorate --oneline --graph"
    => git adog

2/ dotnet command tips
    [Listing all template project]: dotnet new list
    [Create new solution]: dotnet new sln
    [Create new web api project]: dotnet new webapi -o src/AuctionService
    [Add project into solution]: dotnet sln add src/AuctionService
    [Update dotnet-ef]: dotnet tool update dotnet-ef -g
    [Create .gitignore template file]: dotnet new gitignore
    [Add reference between project]: dotnet add reference ../../src/Contracts

3/ RabbitMQ
    - username: guest
    - password: guest
    - is a Message Broker - accepts and forwards messages
    - Producer/Consumer model (Pub/Sub)
    - Messages are stored on queues (message buffer)
    - Can be use persistent storage
    - Exchanges can be used for "routing" functionality
    - Uses AMQP

Section:
    Auctions Service
        - Create a simple API for the Auctions
        - CRUD
        - Seeding Data
        - Using docker compose
        - Using postman to test the API
        - Add migration (switch to AuctionService project): dotnet ef migrations add "InitialCreate" -o Data/Migrations
        - Update Database (switch to AuctionService project): dotnet ef database update
        - Add Postgres database server: docker compose up -d
        - Create DTO and Mapping profiles
        - Add .editorconfig to get the right format suggestions
    Search Service 
        - Create Web Api for Search Service: dotnet new webapi -o src/SearchService
        - Add new project into sln: 
        - Add Model and Seeding data
        - Add pagination, filtering and ordering
        - Temporary using Http to talk to Auction Service
        - Using Polly to handle error when calling Auction Service
    Message Broker
        - Using RabbitMQ -> Asynchronous Messaging
        - No Request/ Response
        - Fire and Forget
        - Event Model (publish/subscribe)
        - Typically used for service to service messaging
        - Transports (RabbitMQ, Azure Service Bus, Amazon SQS)
        - Using RabbitMQ to run locally and not depend on cloud service
        - Services only need to know about the Bus
        - But if the Event Bus is down, service might not be communicate with each other but still be available
        - Add migration for outbox: dotnet ef migrations add Outbox -o ./Data/Migrations
    Identity Server
        - Install template Duende: dotnet new install Duende.IdentityServer.Templates
        - Create new project: dotnet new isaspid -o src/IdentityService
        - Add reference into solution: dotnet sln add src/IdentityService
        - ntloc-Iwishiwere235@
    GateWay
        - Create new project: dotnet new web -o src/GatewayService
        - Add reference into solution: dotnet sln add src/GatewayService

4/ ClientApp (NextJs)
    - Create project: npx create-next-app@latest
    - https://transform.tools/json-to-typescript
    - ServerAction -> if a client component using a serverAction -> when the server action is activated -> be will build another clientComponent with new data return by that server -> return to client browser